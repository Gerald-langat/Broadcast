import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { collection, getDocs, onSnapshot, query, where } from 'firebase/firestore';
import { auth, db } from '../../firebase';
import { ArrowLeftIcon, HomeIcon, MenuAlt1Icon, SearchIcon  } from '@heroicons/react/outline';
import Sidebar from '../../components/National/Sidebar';
import Widgets from '../../components/Constituency/Widgets';
import CommentModal from '../../components/Constituency/CommentModal';
import Head from 'next/head';
import { Button, Spinner, Tooltip } from 'flowbite-react';
import SearchPost from '../../components/Constituency/SearchPost';

const WardPost = () => {
  const router = useRouter();
  const { name } = router.query;
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [userDetails, setUserDetails] = useState(null);
  const [userData, setUserData] = useState(null);
  const [isSidebarVisible, setIsSidebarVisible] = useState(false);
  const [isWidgetsVisible, setIsWidgetsVisible] = useState(false);
  
  const fetchUserData = async () => {
    auth.onAuthStateChanged(async (user) => {
      setUserDetails(user);
    });
  };

  useEffect(() => {
    fetchUserData();
  }, []);

  useEffect(() => {
    const fetchUserData = async () => {
      if (userDetails) {
        const q = query(collection(db, 'userPosts'), where('id', '==', userDetails.uid));
        const querySnapshot = await getDocs(q);
        if (!querySnapshot.empty) {
          setUserData(querySnapshot.docs[0].data());
        }
      }
    };
    fetchUserData();
  }, [userDetails]);

  useEffect(() => {
    if (!userData || !userData.constituency || !name ) {
      setLoading(true);
      return;
    }
  
    // Define the queries
    const q1 = query(
      collection(db, "constituency", userData.constituency),
      where("name", "==", name)
    );
    

    // Listen to both queries using onSnapshot
    const unsubscribe1 = onSnapshot(q1, (snapshot) => {
      setPosts((prevPosts) => [...prevPosts, ...snapshot.docs]);
      setLoading(false);
    });
  
  
  
    // Cleanup the subscriptions on component unmount
    return () => {
      unsubscribe1();
    };
  
  }, [userData, name ]);
  

  const toggleSidebar = () => {
    setIsSidebarVisible(!isSidebarVisible);
    setIsWidgetsVisible(false);
  };

  const toggleWidgets = () => {
    setIsWidgetsVisible(!isWidgetsVisible);
    setIsSidebarVisible(false);
  }

  const toggleHome = () => {
    setIsWidgetsVisible(false);
    setIsSidebarVisible(false);
  }
 

  return (
    <div>
      <Head>
      <title>{name ? name : 'Loading...'}</title>
        <meta name="description" content="Generated by redAnttech" />
        <link rel="icon" href="../../images/Brodcast.jpg" />
      </Head>
      <main className="flex min-h-screen mx-auto dark:bg-gray-950 sm:w-screen min-w-[580px] flex-grow sm:px-10 md:px-24 xl:px-0">
      {isSidebarVisible && (
              <div
                className="fixed inset-0 z-30 bg-black bg-opacity-50 xl:hidden"
                onClick={() => setIsSidebarVisible(false)}
              >
                <div
                  onClick={(e) => e.stopPropagation()} // Prevents the click event from closing the sidebar when clicked inside it
                >
                  <Sidebar />
                </div>
              </div>
            )}
      <div className='hidden xl:inline'>
      <Sidebar />
      </div>
        <div className="xl:ml-[370px] xl:min-w-[576px]  sm:min-w-full flex-grow  w-[500px] max-w-xl">
          <div className="flex items-center space-x-2 py-2 px-3 sticky top-0 bg-white dark:bg-gray-950 border-[1px] rounded-md border-gray-300 dark:border-gray-900">
          <Tooltip content='back' arrow={false} placement="bottom" className="p-1 text-xs bg-gray-500 -mt-1">
            
            <div className="hoverEffect" onClick={() => router.replace('/constituency')}>
              <ArrowLeftIcon className="h-8 animate-pulse cursor-pointer" />
            </div>
          </Tooltip>
            <h2 className="text-lg sm:text-xl font-bold cursor-pointer">
            {name && (
              <span>
            {name}
            </span>
            )}
            </h2>
          </div>
          {loading ? <Button color="gray" className="border-0">
                      <Spinner aria-label="Alternate spinner button example" size="sm" />
                      <span className="pl-3">Loading...</span>
                    </Button> :(
                      <div>
          {posts.map((post) => (
            <div key={post.id}>
           
              <SearchPost key={post.id} id={post.id} post={post}/>
            </div>
          ))}
          </div>
        )}
        </div>
        {isWidgetsVisible && (
          <div className="fixed inset-0 z-30 ml-4 dark:bg-gray-950 min-h-screen bg-opacity-50 xl:hidden" 
          onClick={() => setIsWidgetsVisible(false)}>
          <div className="ml-10"
                  onClick={(e) => e.stopPropagation()} // Prevents the click event from closing the sidebar when clicked inside it
                >
            <Widgets />
            </div>
          </div>
        )}
        <div className='hidden xl:inline'>
        <Widgets />
        </div>
        <CommentModal />
      </main>
      <div
        className="xl:hidden justify-between bottom-0 z-40 fixed bg-slate-50
        dark:bg-gray-900 w-full flex py-4 sm:px-10 md:px-24 px-4"
      >
          <MenuAlt1Icon className='pl-4 h-8 cursor-pointer' onClick={toggleSidebar} />
          <HomeIcon className='h-8 cursor-pointer' onClick={toggleHome}/>
          <SearchIcon className='pr-6 h-8 cursor-pointer' onClick={toggleWidgets}/>
      </div>
    </div>
  );
};

export default WardPost;
